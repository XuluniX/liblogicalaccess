// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iks.proto

#include "iks.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr KeyDiversificationInfo::KeyDiversificationInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : div_input_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , div_type_(0)
{}
struct KeyDiversificationInfoDefaultTypeInternal {
  constexpr KeyDiversificationInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyDiversificationInfoDefaultTypeInternal() {}
  union {
    KeyDiversificationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyDiversificationInfoDefaultTypeInternal _KeyDiversificationInfo_default_instance_;
constexpr SignatureDescription::SignatureDescription(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , run_uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nonce_(uint64_t{0u})
  , timestamp_(uint64_t{0u}){}
struct SignatureDescriptionDefaultTypeInternal {
  constexpr SignatureDescriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignatureDescriptionDefaultTypeInternal() {}
  union {
    SignatureDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignatureDescriptionDefaultTypeInternal _SignatureDescription_default_instance_;
constexpr CMSG_DesfireChangeKey::CMSG_DesfireChangeKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : old_key_uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , old_key_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , new_key_uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , new_key_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_key_uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iv_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , old_key_div_(nullptr)
  , new_key_div_(nullptr)
  , change_same_key_(false)
  , key_number_(0){}
struct CMSG_DesfireChangeKeyDefaultTypeInternal {
  constexpr CMSG_DesfireChangeKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMSG_DesfireChangeKeyDefaultTypeInternal() {}
  union {
    CMSG_DesfireChangeKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMSG_DesfireChangeKeyDefaultTypeInternal _CMSG_DesfireChangeKey_default_instance_;
constexpr SMSG_DesfireChangeKey::SMSG_DesfireChangeKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cryptogram_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SMSG_DesfireChangeKeyDefaultTypeInternal {
  constexpr SMSG_DesfireChangeKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SMSG_DesfireChangeKeyDefaultTypeInternal() {}
  union {
    SMSG_DesfireChangeKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SMSG_DesfireChangeKeyDefaultTypeInternal _SMSG_DesfireChangeKey_default_instance_;
constexpr CMSG_GenRandom::CMSG_GenRandom(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : size_(0){}
struct CMSG_GenRandomDefaultTypeInternal {
  constexpr CMSG_GenRandomDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMSG_GenRandomDefaultTypeInternal() {}
  union {
    CMSG_GenRandom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMSG_GenRandomDefaultTypeInternal _CMSG_GenRandom_default_instance_;
constexpr SMSG_GenRandom::SMSG_GenRandom(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : randombytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SMSG_GenRandomDefaultTypeInternal {
  constexpr SMSG_GenRandomDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SMSG_GenRandomDefaultTypeInternal() {}
  union {
    SMSG_GenRandom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SMSG_GenRandomDefaultTypeInternal _SMSG_GenRandom_default_instance_;
constexpr CMSG_AESOperation::CMSG_AESOperation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iv_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , diversification_(nullptr)
  , request_signature_(false){}
struct CMSG_AESOperationDefaultTypeInternal {
  constexpr CMSG_AESOperationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMSG_AESOperationDefaultTypeInternal() {}
  union {
    CMSG_AESOperation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMSG_AESOperationDefaultTypeInternal _CMSG_AESOperation_default_instance_;
constexpr SMSG_AESResult::SMSG_AESResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signaturedescription_(nullptr){}
struct SMSG_AESResultDefaultTypeInternal {
  constexpr SMSG_AESResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SMSG_AESResultDefaultTypeInternal() {}
  union {
    SMSG_AESResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SMSG_AESResultDefaultTypeInternal _SMSG_AESResult_default_instance_;
constexpr CMSG_DesfireAESAuth_Step1::CMSG_DesfireAESAuth_Step1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , encrypted_random_picc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , diversification_(nullptr){}
struct CMSG_DesfireAESAuth_Step1DefaultTypeInternal {
  constexpr CMSG_DesfireAESAuth_Step1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMSG_DesfireAESAuth_Step1DefaultTypeInternal() {}
  union {
    CMSG_DesfireAESAuth_Step1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMSG_DesfireAESAuth_Step1DefaultTypeInternal _CMSG_DesfireAESAuth_Step1_default_instance_;
constexpr SMSG_DesfireAESAuth_Step1::SMSG_DesfireAESAuth_Step1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encrypted_cryptogram_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , auth_context_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct SMSG_DesfireAESAuth_Step1DefaultTypeInternal {
  constexpr SMSG_DesfireAESAuth_Step1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SMSG_DesfireAESAuth_Step1DefaultTypeInternal() {}
  union {
    SMSG_DesfireAESAuth_Step1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SMSG_DesfireAESAuth_Step1DefaultTypeInternal _SMSG_DesfireAESAuth_Step1_default_instance_;
constexpr CMSG_DesfireISOAuth_Step1::CMSG_DesfireISOAuth_Step1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , random_picc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , diversification_(nullptr){}
struct CMSG_DesfireISOAuth_Step1DefaultTypeInternal {
  constexpr CMSG_DesfireISOAuth_Step1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMSG_DesfireISOAuth_Step1DefaultTypeInternal() {}
  union {
    CMSG_DesfireISOAuth_Step1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMSG_DesfireISOAuth_Step1DefaultTypeInternal _CMSG_DesfireISOAuth_Step1_default_instance_;
constexpr SMSG_DesfireISOAuth_Step1::SMSG_DesfireISOAuth_Step1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : random2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , encrypted_cryptogram_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , auth_context_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct SMSG_DesfireISOAuth_Step1DefaultTypeInternal {
  constexpr SMSG_DesfireISOAuth_Step1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SMSG_DesfireISOAuth_Step1DefaultTypeInternal() {}
  union {
    SMSG_DesfireISOAuth_Step1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SMSG_DesfireISOAuth_Step1DefaultTypeInternal _SMSG_DesfireISOAuth_Step1_default_instance_;
constexpr CMSG_DesfireAuth_Step2::CMSG_DesfireAuth_Step2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , picc_cryptogram_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , auth_context_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , diversification_(nullptr){}
struct CMSG_DesfireAuth_Step2DefaultTypeInternal {
  constexpr CMSG_DesfireAuth_Step2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMSG_DesfireAuth_Step2DefaultTypeInternal() {}
  union {
    CMSG_DesfireAuth_Step2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMSG_DesfireAuth_Step2DefaultTypeInternal _CMSG_DesfireAuth_Step2_default_instance_;
constexpr SMSG_DesfireAuth_Step2::SMSG_DesfireAuth_Step2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_key_ref_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct SMSG_DesfireAuth_Step2DefaultTypeInternal {
  constexpr SMSG_DesfireAuth_Step2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SMSG_DesfireAuth_Step2DefaultTypeInternal() {}
  union {
    SMSG_DesfireAuth_Step2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SMSG_DesfireAuth_Step2DefaultTypeInternal _SMSG_DesfireAuth_Step2_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_iks_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_iks_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_iks_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_iks_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KeyDiversificationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KeyDiversificationInfo, div_type_),
  PROTOBUF_FIELD_OFFSET(::KeyDiversificationInfo, div_input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SignatureDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SignatureDescription, payload_),
  PROTOBUF_FIELD_OFFSET(::SignatureDescription, nonce_),
  PROTOBUF_FIELD_OFFSET(::SignatureDescription, run_uuid_),
  PROTOBUF_FIELD_OFFSET(::SignatureDescription, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireChangeKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireChangeKey, old_key_uuid_),
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireChangeKey, old_key_bytes_),
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireChangeKey, new_key_uuid_),
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireChangeKey, new_key_bytes_),
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireChangeKey, change_same_key_),
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireChangeKey, session_key_uuid_),
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireChangeKey, session_key_),
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireChangeKey, old_key_div_),
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireChangeKey, new_key_div_),
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireChangeKey, key_number_),
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireChangeKey, iv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SMSG_DesfireChangeKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SMSG_DesfireChangeKey, cryptogram_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMSG_GenRandom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMSG_GenRandom, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SMSG_GenRandom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SMSG_GenRandom, randombytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMSG_AESOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMSG_AESOperation, key_uuid_),
  PROTOBUF_FIELD_OFFSET(::CMSG_AESOperation, payload_),
  PROTOBUF_FIELD_OFFSET(::CMSG_AESOperation, iv_),
  PROTOBUF_FIELD_OFFSET(::CMSG_AESOperation, request_signature_),
  PROTOBUF_FIELD_OFFSET(::CMSG_AESOperation, diversification_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SMSG_AESResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SMSG_AESResult, payload_),
  PROTOBUF_FIELD_OFFSET(::SMSG_AESResult, signaturedescription_),
  PROTOBUF_FIELD_OFFSET(::SMSG_AESResult, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireAESAuth_Step1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireAESAuth_Step1, key_uuid_),
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireAESAuth_Step1, encrypted_random_picc_),
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireAESAuth_Step1, diversification_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SMSG_DesfireAESAuth_Step1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SMSG_DesfireAESAuth_Step1, success_),
  PROTOBUF_FIELD_OFFSET(::SMSG_DesfireAESAuth_Step1, encrypted_cryptogram_),
  PROTOBUF_FIELD_OFFSET(::SMSG_DesfireAESAuth_Step1, auth_context_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireISOAuth_Step1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireISOAuth_Step1, key_uuid_),
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireISOAuth_Step1, random_picc_),
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireISOAuth_Step1, diversification_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SMSG_DesfireISOAuth_Step1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SMSG_DesfireISOAuth_Step1, success_),
  PROTOBUF_FIELD_OFFSET(::SMSG_DesfireISOAuth_Step1, random2_),
  PROTOBUF_FIELD_OFFSET(::SMSG_DesfireISOAuth_Step1, encrypted_cryptogram_),
  PROTOBUF_FIELD_OFFSET(::SMSG_DesfireISOAuth_Step1, auth_context_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireAuth_Step2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireAuth_Step2, key_uuid_),
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireAuth_Step2, picc_cryptogram_),
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireAuth_Step2, auth_context_id_),
  PROTOBUF_FIELD_OFFSET(::CMSG_DesfireAuth_Step2, diversification_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SMSG_DesfireAuth_Step2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SMSG_DesfireAuth_Step2, success_),
  PROTOBUF_FIELD_OFFSET(::SMSG_DesfireAuth_Step2, session_key_),
  PROTOBUF_FIELD_OFFSET(::SMSG_DesfireAuth_Step2, session_key_ref_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::KeyDiversificationInfo)},
  { 7, -1, sizeof(::SignatureDescription)},
  { 16, -1, sizeof(::CMSG_DesfireChangeKey)},
  { 32, -1, sizeof(::SMSG_DesfireChangeKey)},
  { 38, -1, sizeof(::CMSG_GenRandom)},
  { 44, -1, sizeof(::SMSG_GenRandom)},
  { 50, -1, sizeof(::CMSG_AESOperation)},
  { 60, -1, sizeof(::SMSG_AESResult)},
  { 68, -1, sizeof(::CMSG_DesfireAESAuth_Step1)},
  { 76, -1, sizeof(::SMSG_DesfireAESAuth_Step1)},
  { 84, -1, sizeof(::CMSG_DesfireISOAuth_Step1)},
  { 92, -1, sizeof(::SMSG_DesfireISOAuth_Step1)},
  { 101, -1, sizeof(::CMSG_DesfireAuth_Step2)},
  { 110, -1, sizeof(::SMSG_DesfireAuth_Step2)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_KeyDiversificationInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SignatureDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMSG_DesfireChangeKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SMSG_DesfireChangeKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMSG_GenRandom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SMSG_GenRandom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMSG_AESOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SMSG_AESResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMSG_DesfireAESAuth_Step1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SMSG_DesfireAESAuth_Step1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMSG_DesfireISOAuth_Step1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SMSG_DesfireISOAuth_Step1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMSG_DesfireAuth_Step2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SMSG_DesfireAuth_Step2_default_instance_),
};

const char descriptor_table_protodef_iks_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tiks.proto\"v\n\026KeyDiversificationInfo\022.\n"
  "\010div_type\030\001 \001(\0162\034.KeyDiversificationInfo"
  ".Type\022\021\n\tdiv_input\030\002 \001(\014\"\031\n\004Type\022\010\n\004NONE"
  "\020\000\022\007\n\003AV2\020\002\"[\n\024SignatureDescription\022\017\n\007p"
  "ayload\030\001 \001(\014\022\r\n\005nonce\030\002 \001(\004\022\020\n\010run_uuid\030"
  "\003 \001(\014\022\021\n\ttimestamp\030\004 \001(\004\"\265\002\n\025CMSG_Desfir"
  "eChangeKey\022\024\n\014old_key_uuid\030\001 \001(\t\022\025\n\rold_"
  "key_bytes\030\002 \001(\014\022\024\n\014new_key_uuid\030\003 \001(\t\022\025\n"
  "\rnew_key_bytes\030\004 \001(\014\022\027\n\017change_same_key\030"
  "\005 \001(\010\022\030\n\020session_key_uuid\030\006 \001(\t\022\023\n\013sessi"
  "on_key\030\007 \001(\014\022,\n\013old_key_div\030\010 \001(\0132\027.KeyD"
  "iversificationInfo\022,\n\013new_key_div\030\t \001(\0132"
  "\027.KeyDiversificationInfo\022\022\n\nkey_number\030\n"
  " \001(\005\022\n\n\002iv\030\013 \001(\014\"+\n\025SMSG_DesfireChangeKe"
  "y\022\022\n\ncryptogram\030\001 \001(\014\"\036\n\016CMSG_GenRandom\022"
  "\014\n\004size\030\001 \001(\005\"%\n\016SMSG_GenRandom\022\023\n\013rando"
  "mBytes\030\001 \001(\014\"\217\001\n\021CMSG_AESOperation\022\020\n\010ke"
  "y_uuid\030\001 \001(\t\022\017\n\007payload\030\003 \001(\014\022\n\n\002iv\030\004 \001("
  "\014\022\031\n\021request_signature\030\005 \001(\010\0220\n\017diversif"
  "ication\030\006 \001(\0132\027.KeyDiversificationInfo\"i"
  "\n\016SMSG_AESResult\022\017\n\007payload\030\001 \001(\014\0223\n\024sig"
  "natureDescription\030\002 \001(\0132\025.SignatureDescr"
  "iption\022\021\n\tsignature\030\003 \001(\014\"~\n\031CMSG_Desfir"
  "eAESAuth_Step1\022\020\n\010key_uuid\030\001 \001(\t\022\035\n\025encr"
  "ypted_random_picc\030\002 \001(\014\0220\n\017diversificati"
  "on\030\003 \001(\0132\027.KeyDiversificationInfo\"c\n\031SMS"
  "G_DesfireAESAuth_Step1\022\017\n\007success\030\001 \001(\010\022"
  "\034\n\024encrypted_cryptogram\030\003 \001(\014\022\027\n\017auth_co"
  "ntext_id\030\004 \001(\014\"t\n\031CMSG_DesfireISOAuth_St"
  "ep1\022\020\n\010key_uuid\030\001 \001(\t\022\023\n\013random_picc\030\002 \001"
  "(\014\0220\n\017diversification\030\003 \001(\0132\027.KeyDiversi"
  "ficationInfo\"t\n\031SMSG_DesfireISOAuth_Step"
  "1\022\017\n\007success\030\001 \001(\010\022\017\n\007random2\030\002 \001(\014\022\034\n\024e"
  "ncrypted_cryptogram\030\003 \001(\014\022\027\n\017auth_contex"
  "t_id\030\004 \001(\014\"\216\001\n\026CMSG_DesfireAuth_Step2\022\020\n"
  "\010key_uuid\030\001 \001(\t\022\027\n\017picc_cryptogram\030\002 \001(\014"
  "\022\027\n\017auth_context_id\030\003 \001(\014\0220\n\017diversifica"
  "tion\030\004 \001(\0132\027.KeyDiversificationInfo\"W\n\026S"
  "MSG_DesfireAuth_Step2\022\017\n\007success\030\001 \001(\010\022\023"
  "\n\013session_key\030\002 \001(\014\022\027\n\017session_key_ref\030\003"
  " \001(\t2\225\004\n\nIKSService\022/\n\tGenRandom\022\017.CMSG_"
  "GenRandom\032\017.SMSG_GenRandom\"\000\0223\n\nAESEncry"
  "pt\022\022.CMSG_AESOperation\032\017.SMSG_AESResult\""
  "\000\0223\n\nAESDecrypt\022\022.CMSG_AESOperation\032\017.SM"
  "SG_AESResult\"\000\022K\n\017DESFireISOAuth1\022\032.CMSG"
  "_DesfireISOAuth_Step1\032\032.SMSG_DesfireISOA"
  "uth_Step1\"\000\022E\n\017DESFireISOAuth2\022\027.CMSG_De"
  "sfireAuth_Step2\032\027.SMSG_DesfireAuth_Step2"
  "\"\000\022K\n\017DESFireAESAuth1\022\032.CMSG_DesfireAESA"
  "uth_Step1\032\032.SMSG_DesfireAESAuth_Step1\"\000\022"
  "E\n\017DESFireAESAuth2\022\027.CMSG_DesfireAuth_St"
  "ep2\032\027.SMSG_DesfireAuth_Step2\"\000\022D\n\020DESFir"
  "eChangeKey\022\026.CMSG_DesfireChangeKey\032\026.SMS"
  "G_DesfireChangeKey\"\000B\026\n\022com.islog.iks.gr"
  "pcP\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_iks_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_iks_2eproto = {
  false, false, 2172, descriptor_table_protodef_iks_2eproto, "iks.proto", 
  &descriptor_table_iks_2eproto_once, nullptr, 0, 14,
  schemas, file_default_instances, TableStruct_iks_2eproto::offsets,
  file_level_metadata_iks_2eproto, file_level_enum_descriptors_iks_2eproto, file_level_service_descriptors_iks_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_iks_2eproto_getter() {
  return &descriptor_table_iks_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_iks_2eproto(&descriptor_table_iks_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyDiversificationInfo_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iks_2eproto);
  return file_level_enum_descriptors_iks_2eproto[0];
}
bool KeyDiversificationInfo_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KeyDiversificationInfo_Type KeyDiversificationInfo::NONE;
constexpr KeyDiversificationInfo_Type KeyDiversificationInfo::AV2;
constexpr KeyDiversificationInfo_Type KeyDiversificationInfo::Type_MIN;
constexpr KeyDiversificationInfo_Type KeyDiversificationInfo::Type_MAX;
constexpr int KeyDiversificationInfo::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class KeyDiversificationInfo::_Internal {
 public:
};

KeyDiversificationInfo::KeyDiversificationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KeyDiversificationInfo)
}
KeyDiversificationInfo::KeyDiversificationInfo(const KeyDiversificationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  div_input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_div_input().empty()) {
    div_input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_div_input(), 
      GetArenaForAllocation());
  }
  div_type_ = from.div_type_;
  // @@protoc_insertion_point(copy_constructor:KeyDiversificationInfo)
}

void KeyDiversificationInfo::SharedCtor() {
div_input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
div_type_ = 0;
}

KeyDiversificationInfo::~KeyDiversificationInfo() {
  // @@protoc_insertion_point(destructor:KeyDiversificationInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyDiversificationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  div_input_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyDiversificationInfo::ArenaDtor(void* object) {
  KeyDiversificationInfo* _this = reinterpret_cast< KeyDiversificationInfo* >(object);
  (void)_this;
}
void KeyDiversificationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyDiversificationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyDiversificationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KeyDiversificationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  div_input_.ClearToEmpty();
  div_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyDiversificationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KeyDiversificationInfo.Type div_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_div_type(static_cast<::KeyDiversificationInfo_Type>(val));
        } else goto handle_unusual;
        continue;
      // bytes div_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_div_input();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyDiversificationInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KeyDiversificationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KeyDiversificationInfo.Type div_type = 1;
  if (this->div_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_div_type(), target);
  }

  // bytes div_input = 2;
  if (!this->div_input().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_div_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KeyDiversificationInfo)
  return target;
}

size_t KeyDiversificationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KeyDiversificationInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes div_input = 2;
  if (!this->div_input().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_div_input());
  }

  // .KeyDiversificationInfo.Type div_type = 1;
  if (this->div_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_div_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyDiversificationInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KeyDiversificationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyDiversificationInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyDiversificationInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KeyDiversificationInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KeyDiversificationInfo)
    MergeFrom(*source);
  }
}

void KeyDiversificationInfo::MergeFrom(const KeyDiversificationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KeyDiversificationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.div_input().empty()) {
    _internal_set_div_input(from._internal_div_input());
  }
  if (from.div_type() != 0) {
    _internal_set_div_type(from._internal_div_type());
  }
}

void KeyDiversificationInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KeyDiversificationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyDiversificationInfo::CopyFrom(const KeyDiversificationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KeyDiversificationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyDiversificationInfo::IsInitialized() const {
  return true;
}

void KeyDiversificationInfo::InternalSwap(KeyDiversificationInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &div_input_, GetArenaForAllocation(),
      &other->div_input_, other->GetArenaForAllocation()
  );
  swap(div_type_, other->div_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyDiversificationInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iks_2eproto_getter, &descriptor_table_iks_2eproto_once,
      file_level_metadata_iks_2eproto[0]);
}

// ===================================================================

class SignatureDescription::_Internal {
 public:
};

SignatureDescription::SignatureDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SignatureDescription)
}
SignatureDescription::SignatureDescription(const SignatureDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  run_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_run_uuid().empty()) {
    run_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_run_uuid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&nonce_, &from.nonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&nonce_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:SignatureDescription)
}

void SignatureDescription::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
run_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nonce_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&nonce_)) + sizeof(timestamp_));
}

SignatureDescription::~SignatureDescription() {
  // @@protoc_insertion_point(destructor:SignatureDescription)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignatureDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  run_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignatureDescription::ArenaDtor(void* object) {
  SignatureDescription* _this = reinterpret_cast< SignatureDescription* >(object);
  (void)_this;
}
void SignatureDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignatureDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignatureDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:SignatureDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmpty();
  run_uuid_.ClearToEmpty();
  ::memset(&nonce_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&nonce_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignatureDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes run_uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_run_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignatureDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SignatureDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_payload(), target);
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_nonce(), target);
  }

  // bytes run_uuid = 3;
  if (!this->run_uuid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_run_uuid(), target);
  }

  // uint64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SignatureDescription)
  return target;
}

size_t SignatureDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SignatureDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // bytes run_uuid = 3;
  if (!this->run_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_run_uuid());
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  // uint64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignatureDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SignatureDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const SignatureDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignatureDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SignatureDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SignatureDescription)
    MergeFrom(*source);
  }
}

void SignatureDescription::MergeFrom(const SignatureDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SignatureDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  if (!from.run_uuid().empty()) {
    _internal_set_run_uuid(from._internal_run_uuid());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void SignatureDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SignatureDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatureDescription::CopyFrom(const SignatureDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SignatureDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureDescription::IsInitialized() const {
  return true;
}

void SignatureDescription::InternalSwap(SignatureDescription* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, GetArenaForAllocation(),
      &other->payload_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &run_uuid_, GetArenaForAllocation(),
      &other->run_uuid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignatureDescription, timestamp_)
      + sizeof(SignatureDescription::timestamp_)
      - PROTOBUF_FIELD_OFFSET(SignatureDescription, nonce_)>(
          reinterpret_cast<char*>(&nonce_),
          reinterpret_cast<char*>(&other->nonce_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureDescription::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iks_2eproto_getter, &descriptor_table_iks_2eproto_once,
      file_level_metadata_iks_2eproto[1]);
}

// ===================================================================

class CMSG_DesfireChangeKey::_Internal {
 public:
  static const ::KeyDiversificationInfo& old_key_div(const CMSG_DesfireChangeKey* msg);
  static const ::KeyDiversificationInfo& new_key_div(const CMSG_DesfireChangeKey* msg);
};

const ::KeyDiversificationInfo&
CMSG_DesfireChangeKey::_Internal::old_key_div(const CMSG_DesfireChangeKey* msg) {
  return *msg->old_key_div_;
}
const ::KeyDiversificationInfo&
CMSG_DesfireChangeKey::_Internal::new_key_div(const CMSG_DesfireChangeKey* msg) {
  return *msg->new_key_div_;
}
CMSG_DesfireChangeKey::CMSG_DesfireChangeKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMSG_DesfireChangeKey)
}
CMSG_DesfireChangeKey::CMSG_DesfireChangeKey(const CMSG_DesfireChangeKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  old_key_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_key_uuid().empty()) {
    old_key_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_old_key_uuid(), 
      GetArenaForAllocation());
  }
  old_key_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_key_bytes().empty()) {
    old_key_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_old_key_bytes(), 
      GetArenaForAllocation());
  }
  new_key_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_key_uuid().empty()) {
    new_key_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_new_key_uuid(), 
      GetArenaForAllocation());
  }
  new_key_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_key_bytes().empty()) {
    new_key_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_new_key_bytes(), 
      GetArenaForAllocation());
  }
  session_key_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_key_uuid().empty()) {
    session_key_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_key_uuid(), 
      GetArenaForAllocation());
  }
  session_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_key().empty()) {
    session_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_key(), 
      GetArenaForAllocation());
  }
  iv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iv().empty()) {
    iv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_iv(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_old_key_div()) {
    old_key_div_ = new ::KeyDiversificationInfo(*from.old_key_div_);
  } else {
    old_key_div_ = nullptr;
  }
  if (from._internal_has_new_key_div()) {
    new_key_div_ = new ::KeyDiversificationInfo(*from.new_key_div_);
  } else {
    new_key_div_ = nullptr;
  }
  ::memcpy(&change_same_key_, &from.change_same_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_number_) -
    reinterpret_cast<char*>(&change_same_key_)) + sizeof(key_number_));
  // @@protoc_insertion_point(copy_constructor:CMSG_DesfireChangeKey)
}

void CMSG_DesfireChangeKey::SharedCtor() {
old_key_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
old_key_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
new_key_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
new_key_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
session_key_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
session_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
iv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&old_key_div_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&key_number_) -
    reinterpret_cast<char*>(&old_key_div_)) + sizeof(key_number_));
}

CMSG_DesfireChangeKey::~CMSG_DesfireChangeKey() {
  // @@protoc_insertion_point(destructor:CMSG_DesfireChangeKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMSG_DesfireChangeKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  old_key_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_key_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_key_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_key_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_key_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete old_key_div_;
  if (this != internal_default_instance()) delete new_key_div_;
}

void CMSG_DesfireChangeKey::ArenaDtor(void* object) {
  CMSG_DesfireChangeKey* _this = reinterpret_cast< CMSG_DesfireChangeKey* >(object);
  (void)_this;
}
void CMSG_DesfireChangeKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMSG_DesfireChangeKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMSG_DesfireChangeKey::Clear() {
// @@protoc_insertion_point(message_clear_start:CMSG_DesfireChangeKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  old_key_uuid_.ClearToEmpty();
  old_key_bytes_.ClearToEmpty();
  new_key_uuid_.ClearToEmpty();
  new_key_bytes_.ClearToEmpty();
  session_key_uuid_.ClearToEmpty();
  session_key_.ClearToEmpty();
  iv_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && old_key_div_ != nullptr) {
    delete old_key_div_;
  }
  old_key_div_ = nullptr;
  if (GetArenaForAllocation() == nullptr && new_key_div_ != nullptr) {
    delete new_key_div_;
  }
  new_key_div_ = nullptr;
  ::memset(&change_same_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_number_) -
      reinterpret_cast<char*>(&change_same_key_)) + sizeof(key_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMSG_DesfireChangeKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string old_key_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_old_key_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMSG_DesfireChangeKey.old_key_uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes old_key_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_old_key_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string new_key_uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_new_key_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMSG_DesfireChangeKey.new_key_uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes new_key_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_new_key_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool change_same_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          change_same_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_key_uuid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_session_key_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMSG_DesfireChangeKey.session_key_uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes session_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_session_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KeyDiversificationInfo old_key_div = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_key_div(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KeyDiversificationInfo new_key_div = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_key_div(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 key_number = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          key_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes iv = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_iv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMSG_DesfireChangeKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMSG_DesfireChangeKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string old_key_uuid = 1;
  if (!this->old_key_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_old_key_uuid().data(), static_cast<int>(this->_internal_old_key_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CMSG_DesfireChangeKey.old_key_uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_old_key_uuid(), target);
  }

  // bytes old_key_bytes = 2;
  if (!this->old_key_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_old_key_bytes(), target);
  }

  // string new_key_uuid = 3;
  if (!this->new_key_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_key_uuid().data(), static_cast<int>(this->_internal_new_key_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CMSG_DesfireChangeKey.new_key_uuid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_new_key_uuid(), target);
  }

  // bytes new_key_bytes = 4;
  if (!this->new_key_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_new_key_bytes(), target);
  }

  // bool change_same_key = 5;
  if (this->change_same_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_change_same_key(), target);
  }

  // string session_key_uuid = 6;
  if (!this->session_key_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_key_uuid().data(), static_cast<int>(this->_internal_session_key_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CMSG_DesfireChangeKey.session_key_uuid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_session_key_uuid(), target);
  }

  // bytes session_key = 7;
  if (!this->session_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_session_key(), target);
  }

  // .KeyDiversificationInfo old_key_div = 8;
  if (this->has_old_key_div()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::old_key_div(this), target, stream);
  }

  // .KeyDiversificationInfo new_key_div = 9;
  if (this->has_new_key_div()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::new_key_div(this), target, stream);
  }

  // int32 key_number = 10;
  if (this->key_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_key_number(), target);
  }

  // bytes iv = 11;
  if (!this->iv().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_iv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMSG_DesfireChangeKey)
  return target;
}

size_t CMSG_DesfireChangeKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMSG_DesfireChangeKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string old_key_uuid = 1;
  if (!this->old_key_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_old_key_uuid());
  }

  // bytes old_key_bytes = 2;
  if (!this->old_key_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_key_bytes());
  }

  // string new_key_uuid = 3;
  if (!this->new_key_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_key_uuid());
  }

  // bytes new_key_bytes = 4;
  if (!this->new_key_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_key_bytes());
  }

  // string session_key_uuid = 6;
  if (!this->session_key_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_key_uuid());
  }

  // bytes session_key = 7;
  if (!this->session_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_session_key());
  }

  // bytes iv = 11;
  if (!this->iv().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_iv());
  }

  // .KeyDiversificationInfo old_key_div = 8;
  if (this->has_old_key_div()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_key_div_);
  }

  // .KeyDiversificationInfo new_key_div = 9;
  if (this->has_new_key_div()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_key_div_);
  }

  // bool change_same_key = 5;
  if (this->change_same_key() != 0) {
    total_size += 1 + 1;
  }

  // int32 key_number = 10;
  if (this->key_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_key_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMSG_DesfireChangeKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMSG_DesfireChangeKey)
  GOOGLE_DCHECK_NE(&from, this);
  const CMSG_DesfireChangeKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMSG_DesfireChangeKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMSG_DesfireChangeKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMSG_DesfireChangeKey)
    MergeFrom(*source);
  }
}

void CMSG_DesfireChangeKey::MergeFrom(const CMSG_DesfireChangeKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMSG_DesfireChangeKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.old_key_uuid().empty()) {
    _internal_set_old_key_uuid(from._internal_old_key_uuid());
  }
  if (!from.old_key_bytes().empty()) {
    _internal_set_old_key_bytes(from._internal_old_key_bytes());
  }
  if (!from.new_key_uuid().empty()) {
    _internal_set_new_key_uuid(from._internal_new_key_uuid());
  }
  if (!from.new_key_bytes().empty()) {
    _internal_set_new_key_bytes(from._internal_new_key_bytes());
  }
  if (!from.session_key_uuid().empty()) {
    _internal_set_session_key_uuid(from._internal_session_key_uuid());
  }
  if (!from.session_key().empty()) {
    _internal_set_session_key(from._internal_session_key());
  }
  if (!from.iv().empty()) {
    _internal_set_iv(from._internal_iv());
  }
  if (from.has_old_key_div()) {
    _internal_mutable_old_key_div()->::KeyDiversificationInfo::MergeFrom(from._internal_old_key_div());
  }
  if (from.has_new_key_div()) {
    _internal_mutable_new_key_div()->::KeyDiversificationInfo::MergeFrom(from._internal_new_key_div());
  }
  if (from.change_same_key() != 0) {
    _internal_set_change_same_key(from._internal_change_same_key());
  }
  if (from.key_number() != 0) {
    _internal_set_key_number(from._internal_key_number());
  }
}

void CMSG_DesfireChangeKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMSG_DesfireChangeKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMSG_DesfireChangeKey::CopyFrom(const CMSG_DesfireChangeKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMSG_DesfireChangeKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMSG_DesfireChangeKey::IsInitialized() const {
  return true;
}

void CMSG_DesfireChangeKey::InternalSwap(CMSG_DesfireChangeKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &old_key_uuid_, GetArenaForAllocation(),
      &other->old_key_uuid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &old_key_bytes_, GetArenaForAllocation(),
      &other->old_key_bytes_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &new_key_uuid_, GetArenaForAllocation(),
      &other->new_key_uuid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &new_key_bytes_, GetArenaForAllocation(),
      &other->new_key_bytes_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_key_uuid_, GetArenaForAllocation(),
      &other->session_key_uuid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_key_, GetArenaForAllocation(),
      &other->session_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &iv_, GetArenaForAllocation(),
      &other->iv_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMSG_DesfireChangeKey, key_number_)
      + sizeof(CMSG_DesfireChangeKey::key_number_)
      - PROTOBUF_FIELD_OFFSET(CMSG_DesfireChangeKey, old_key_div_)>(
          reinterpret_cast<char*>(&old_key_div_),
          reinterpret_cast<char*>(&other->old_key_div_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMSG_DesfireChangeKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iks_2eproto_getter, &descriptor_table_iks_2eproto_once,
      file_level_metadata_iks_2eproto[2]);
}

// ===================================================================

class SMSG_DesfireChangeKey::_Internal {
 public:
};

SMSG_DesfireChangeKey::SMSG_DesfireChangeKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SMSG_DesfireChangeKey)
}
SMSG_DesfireChangeKey::SMSG_DesfireChangeKey(const SMSG_DesfireChangeKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cryptogram_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cryptogram().empty()) {
    cryptogram_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cryptogram(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SMSG_DesfireChangeKey)
}

void SMSG_DesfireChangeKey::SharedCtor() {
cryptogram_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SMSG_DesfireChangeKey::~SMSG_DesfireChangeKey() {
  // @@protoc_insertion_point(destructor:SMSG_DesfireChangeKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SMSG_DesfireChangeKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cryptogram_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SMSG_DesfireChangeKey::ArenaDtor(void* object) {
  SMSG_DesfireChangeKey* _this = reinterpret_cast< SMSG_DesfireChangeKey* >(object);
  (void)_this;
}
void SMSG_DesfireChangeKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SMSG_DesfireChangeKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SMSG_DesfireChangeKey::Clear() {
// @@protoc_insertion_point(message_clear_start:SMSG_DesfireChangeKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cryptogram_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SMSG_DesfireChangeKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes cryptogram = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cryptogram();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMSG_DesfireChangeKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SMSG_DesfireChangeKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes cryptogram = 1;
  if (!this->cryptogram().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_cryptogram(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SMSG_DesfireChangeKey)
  return target;
}

size_t SMSG_DesfireChangeKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SMSG_DesfireChangeKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cryptogram = 1;
  if (!this->cryptogram().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cryptogram());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMSG_DesfireChangeKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SMSG_DesfireChangeKey)
  GOOGLE_DCHECK_NE(&from, this);
  const SMSG_DesfireChangeKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMSG_DesfireChangeKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SMSG_DesfireChangeKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SMSG_DesfireChangeKey)
    MergeFrom(*source);
  }
}

void SMSG_DesfireChangeKey::MergeFrom(const SMSG_DesfireChangeKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SMSG_DesfireChangeKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.cryptogram().empty()) {
    _internal_set_cryptogram(from._internal_cryptogram());
  }
}

void SMSG_DesfireChangeKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SMSG_DesfireChangeKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMSG_DesfireChangeKey::CopyFrom(const SMSG_DesfireChangeKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SMSG_DesfireChangeKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMSG_DesfireChangeKey::IsInitialized() const {
  return true;
}

void SMSG_DesfireChangeKey::InternalSwap(SMSG_DesfireChangeKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cryptogram_, GetArenaForAllocation(),
      &other->cryptogram_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SMSG_DesfireChangeKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iks_2eproto_getter, &descriptor_table_iks_2eproto_once,
      file_level_metadata_iks_2eproto[3]);
}

// ===================================================================

class CMSG_GenRandom::_Internal {
 public:
};

CMSG_GenRandom::CMSG_GenRandom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMSG_GenRandom)
}
CMSG_GenRandom::CMSG_GenRandom(const CMSG_GenRandom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:CMSG_GenRandom)
}

void CMSG_GenRandom::SharedCtor() {
size_ = 0;
}

CMSG_GenRandom::~CMSG_GenRandom() {
  // @@protoc_insertion_point(destructor:CMSG_GenRandom)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMSG_GenRandom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMSG_GenRandom::ArenaDtor(void* object) {
  CMSG_GenRandom* _this = reinterpret_cast< CMSG_GenRandom* >(object);
  (void)_this;
}
void CMSG_GenRandom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMSG_GenRandom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMSG_GenRandom::Clear() {
// @@protoc_insertion_point(message_clear_start:CMSG_GenRandom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMSG_GenRandom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMSG_GenRandom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMSG_GenRandom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMSG_GenRandom)
  return target;
}

size_t CMSG_GenRandom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMSG_GenRandom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMSG_GenRandom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMSG_GenRandom)
  GOOGLE_DCHECK_NE(&from, this);
  const CMSG_GenRandom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMSG_GenRandom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMSG_GenRandom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMSG_GenRandom)
    MergeFrom(*source);
  }
}

void CMSG_GenRandom::MergeFrom(const CMSG_GenRandom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMSG_GenRandom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void CMSG_GenRandom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMSG_GenRandom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMSG_GenRandom::CopyFrom(const CMSG_GenRandom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMSG_GenRandom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMSG_GenRandom::IsInitialized() const {
  return true;
}

void CMSG_GenRandom::InternalSwap(CMSG_GenRandom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMSG_GenRandom::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iks_2eproto_getter, &descriptor_table_iks_2eproto_once,
      file_level_metadata_iks_2eproto[4]);
}

// ===================================================================

class SMSG_GenRandom::_Internal {
 public:
};

SMSG_GenRandom::SMSG_GenRandom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SMSG_GenRandom)
}
SMSG_GenRandom::SMSG_GenRandom(const SMSG_GenRandom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  randombytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_randombytes().empty()) {
    randombytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_randombytes(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SMSG_GenRandom)
}

void SMSG_GenRandom::SharedCtor() {
randombytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SMSG_GenRandom::~SMSG_GenRandom() {
  // @@protoc_insertion_point(destructor:SMSG_GenRandom)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SMSG_GenRandom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  randombytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SMSG_GenRandom::ArenaDtor(void* object) {
  SMSG_GenRandom* _this = reinterpret_cast< SMSG_GenRandom* >(object);
  (void)_this;
}
void SMSG_GenRandom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SMSG_GenRandom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SMSG_GenRandom::Clear() {
// @@protoc_insertion_point(message_clear_start:SMSG_GenRandom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  randombytes_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SMSG_GenRandom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes randomBytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_randombytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMSG_GenRandom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SMSG_GenRandom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes randomBytes = 1;
  if (!this->randombytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_randombytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SMSG_GenRandom)
  return target;
}

size_t SMSG_GenRandom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SMSG_GenRandom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes randomBytes = 1;
  if (!this->randombytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_randombytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMSG_GenRandom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SMSG_GenRandom)
  GOOGLE_DCHECK_NE(&from, this);
  const SMSG_GenRandom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMSG_GenRandom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SMSG_GenRandom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SMSG_GenRandom)
    MergeFrom(*source);
  }
}

void SMSG_GenRandom::MergeFrom(const SMSG_GenRandom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SMSG_GenRandom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.randombytes().empty()) {
    _internal_set_randombytes(from._internal_randombytes());
  }
}

void SMSG_GenRandom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SMSG_GenRandom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMSG_GenRandom::CopyFrom(const SMSG_GenRandom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SMSG_GenRandom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMSG_GenRandom::IsInitialized() const {
  return true;
}

void SMSG_GenRandom::InternalSwap(SMSG_GenRandom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &randombytes_, GetArenaForAllocation(),
      &other->randombytes_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SMSG_GenRandom::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iks_2eproto_getter, &descriptor_table_iks_2eproto_once,
      file_level_metadata_iks_2eproto[5]);
}

// ===================================================================

class CMSG_AESOperation::_Internal {
 public:
  static const ::KeyDiversificationInfo& diversification(const CMSG_AESOperation* msg);
};

const ::KeyDiversificationInfo&
CMSG_AESOperation::_Internal::diversification(const CMSG_AESOperation* msg) {
  return *msg->diversification_;
}
CMSG_AESOperation::CMSG_AESOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMSG_AESOperation)
}
CMSG_AESOperation::CMSG_AESOperation(const CMSG_AESOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key_uuid().empty()) {
    key_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key_uuid(), 
      GetArenaForAllocation());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  iv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iv().empty()) {
    iv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_iv(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_diversification()) {
    diversification_ = new ::KeyDiversificationInfo(*from.diversification_);
  } else {
    diversification_ = nullptr;
  }
  request_signature_ = from.request_signature_;
  // @@protoc_insertion_point(copy_constructor:CMSG_AESOperation)
}

void CMSG_AESOperation::SharedCtor() {
key_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
iv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&diversification_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_signature_) -
    reinterpret_cast<char*>(&diversification_)) + sizeof(request_signature_));
}

CMSG_AESOperation::~CMSG_AESOperation() {
  // @@protoc_insertion_point(destructor:CMSG_AESOperation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMSG_AESOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete diversification_;
}

void CMSG_AESOperation::ArenaDtor(void* object) {
  CMSG_AESOperation* _this = reinterpret_cast< CMSG_AESOperation* >(object);
  (void)_this;
}
void CMSG_AESOperation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMSG_AESOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMSG_AESOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMSG_AESOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_uuid_.ClearToEmpty();
  payload_.ClearToEmpty();
  iv_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && diversification_ != nullptr) {
    delete diversification_;
  }
  diversification_ = nullptr;
  request_signature_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMSG_AESOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMSG_AESOperation.key_uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes iv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_iv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool request_signature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          request_signature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KeyDiversificationInfo diversification = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_diversification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMSG_AESOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMSG_AESOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key_uuid = 1;
  if (!this->key_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_uuid().data(), static_cast<int>(this->_internal_key_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CMSG_AESOperation.key_uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key_uuid(), target);
  }

  // bytes payload = 3;
  if (!this->payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  // bytes iv = 4;
  if (!this->iv().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_iv(), target);
  }

  // bool request_signature = 5;
  if (this->request_signature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_request_signature(), target);
  }

  // .KeyDiversificationInfo diversification = 6;
  if (this->has_diversification()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::diversification(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMSG_AESOperation)
  return target;
}

size_t CMSG_AESOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMSG_AESOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_uuid = 1;
  if (!this->key_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_uuid());
  }

  // bytes payload = 3;
  if (!this->payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // bytes iv = 4;
  if (!this->iv().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_iv());
  }

  // .KeyDiversificationInfo diversification = 6;
  if (this->has_diversification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diversification_);
  }

  // bool request_signature = 5;
  if (this->request_signature() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMSG_AESOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMSG_AESOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMSG_AESOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMSG_AESOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMSG_AESOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMSG_AESOperation)
    MergeFrom(*source);
  }
}

void CMSG_AESOperation::MergeFrom(const CMSG_AESOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMSG_AESOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.key_uuid().empty()) {
    _internal_set_key_uuid(from._internal_key_uuid());
  }
  if (!from.payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  if (!from.iv().empty()) {
    _internal_set_iv(from._internal_iv());
  }
  if (from.has_diversification()) {
    _internal_mutable_diversification()->::KeyDiversificationInfo::MergeFrom(from._internal_diversification());
  }
  if (from.request_signature() != 0) {
    _internal_set_request_signature(from._internal_request_signature());
  }
}

void CMSG_AESOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMSG_AESOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMSG_AESOperation::CopyFrom(const CMSG_AESOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMSG_AESOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMSG_AESOperation::IsInitialized() const {
  return true;
}

void CMSG_AESOperation::InternalSwap(CMSG_AESOperation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_uuid_, GetArenaForAllocation(),
      &other->key_uuid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, GetArenaForAllocation(),
      &other->payload_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &iv_, GetArenaForAllocation(),
      &other->iv_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMSG_AESOperation, request_signature_)
      + sizeof(CMSG_AESOperation::request_signature_)
      - PROTOBUF_FIELD_OFFSET(CMSG_AESOperation, diversification_)>(
          reinterpret_cast<char*>(&diversification_),
          reinterpret_cast<char*>(&other->diversification_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMSG_AESOperation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iks_2eproto_getter, &descriptor_table_iks_2eproto_once,
      file_level_metadata_iks_2eproto[6]);
}

// ===================================================================

class SMSG_AESResult::_Internal {
 public:
  static const ::SignatureDescription& signaturedescription(const SMSG_AESResult* msg);
};

const ::SignatureDescription&
SMSG_AESResult::_Internal::signaturedescription(const SMSG_AESResult* msg) {
  return *msg->signaturedescription_;
}
SMSG_AESResult::SMSG_AESResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SMSG_AESResult)
}
SMSG_AESResult::SMSG_AESResult(const SMSG_AESResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_signaturedescription()) {
    signaturedescription_ = new ::SignatureDescription(*from.signaturedescription_);
  } else {
    signaturedescription_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SMSG_AESResult)
}

void SMSG_AESResult::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signaturedescription_ = nullptr;
}

SMSG_AESResult::~SMSG_AESResult() {
  // @@protoc_insertion_point(destructor:SMSG_AESResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SMSG_AESResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signaturedescription_;
}

void SMSG_AESResult::ArenaDtor(void* object) {
  SMSG_AESResult* _this = reinterpret_cast< SMSG_AESResult* >(object);
  (void)_this;
}
void SMSG_AESResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SMSG_AESResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SMSG_AESResult::Clear() {
// @@protoc_insertion_point(message_clear_start:SMSG_AESResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmpty();
  signature_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && signaturedescription_ != nullptr) {
    delete signaturedescription_;
  }
  signaturedescription_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SMSG_AESResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SignatureDescription signatureDescription = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signaturedescription(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMSG_AESResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SMSG_AESResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_payload(), target);
  }

  // .SignatureDescription signatureDescription = 2;
  if (this->has_signaturedescription()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signaturedescription(this), target, stream);
  }

  // bytes signature = 3;
  if (!this->signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SMSG_AESResult)
  return target;
}

size_t SMSG_AESResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SMSG_AESResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // bytes signature = 3;
  if (!this->signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .SignatureDescription signatureDescription = 2;
  if (this->has_signaturedescription()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signaturedescription_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMSG_AESResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SMSG_AESResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SMSG_AESResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMSG_AESResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SMSG_AESResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SMSG_AESResult)
    MergeFrom(*source);
  }
}

void SMSG_AESResult::MergeFrom(const SMSG_AESResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SMSG_AESResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  if (!from.signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (from.has_signaturedescription()) {
    _internal_mutable_signaturedescription()->::SignatureDescription::MergeFrom(from._internal_signaturedescription());
  }
}

void SMSG_AESResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SMSG_AESResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMSG_AESResult::CopyFrom(const SMSG_AESResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SMSG_AESResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMSG_AESResult::IsInitialized() const {
  return true;
}

void SMSG_AESResult::InternalSwap(SMSG_AESResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, GetArenaForAllocation(),
      &other->payload_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, GetArenaForAllocation(),
      &other->signature_, other->GetArenaForAllocation()
  );
  swap(signaturedescription_, other->signaturedescription_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMSG_AESResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iks_2eproto_getter, &descriptor_table_iks_2eproto_once,
      file_level_metadata_iks_2eproto[7]);
}

// ===================================================================

class CMSG_DesfireAESAuth_Step1::_Internal {
 public:
  static const ::KeyDiversificationInfo& diversification(const CMSG_DesfireAESAuth_Step1* msg);
};

const ::KeyDiversificationInfo&
CMSG_DesfireAESAuth_Step1::_Internal::diversification(const CMSG_DesfireAESAuth_Step1* msg) {
  return *msg->diversification_;
}
CMSG_DesfireAESAuth_Step1::CMSG_DesfireAESAuth_Step1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMSG_DesfireAESAuth_Step1)
}
CMSG_DesfireAESAuth_Step1::CMSG_DesfireAESAuth_Step1(const CMSG_DesfireAESAuth_Step1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key_uuid().empty()) {
    key_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key_uuid(), 
      GetArenaForAllocation());
  }
  encrypted_random_picc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encrypted_random_picc().empty()) {
    encrypted_random_picc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encrypted_random_picc(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_diversification()) {
    diversification_ = new ::KeyDiversificationInfo(*from.diversification_);
  } else {
    diversification_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMSG_DesfireAESAuth_Step1)
}

void CMSG_DesfireAESAuth_Step1::SharedCtor() {
key_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
encrypted_random_picc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
diversification_ = nullptr;
}

CMSG_DesfireAESAuth_Step1::~CMSG_DesfireAESAuth_Step1() {
  // @@protoc_insertion_point(destructor:CMSG_DesfireAESAuth_Step1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMSG_DesfireAESAuth_Step1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_random_picc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete diversification_;
}

void CMSG_DesfireAESAuth_Step1::ArenaDtor(void* object) {
  CMSG_DesfireAESAuth_Step1* _this = reinterpret_cast< CMSG_DesfireAESAuth_Step1* >(object);
  (void)_this;
}
void CMSG_DesfireAESAuth_Step1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMSG_DesfireAESAuth_Step1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMSG_DesfireAESAuth_Step1::Clear() {
// @@protoc_insertion_point(message_clear_start:CMSG_DesfireAESAuth_Step1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_uuid_.ClearToEmpty();
  encrypted_random_picc_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && diversification_ != nullptr) {
    delete diversification_;
  }
  diversification_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMSG_DesfireAESAuth_Step1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMSG_DesfireAESAuth_Step1.key_uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes encrypted_random_picc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_encrypted_random_picc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KeyDiversificationInfo diversification = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_diversification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMSG_DesfireAESAuth_Step1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMSG_DesfireAESAuth_Step1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key_uuid = 1;
  if (!this->key_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_uuid().data(), static_cast<int>(this->_internal_key_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CMSG_DesfireAESAuth_Step1.key_uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key_uuid(), target);
  }

  // bytes encrypted_random_picc = 2;
  if (!this->encrypted_random_picc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_encrypted_random_picc(), target);
  }

  // .KeyDiversificationInfo diversification = 3;
  if (this->has_diversification()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::diversification(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMSG_DesfireAESAuth_Step1)
  return target;
}

size_t CMSG_DesfireAESAuth_Step1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMSG_DesfireAESAuth_Step1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_uuid = 1;
  if (!this->key_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_uuid());
  }

  // bytes encrypted_random_picc = 2;
  if (!this->encrypted_random_picc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encrypted_random_picc());
  }

  // .KeyDiversificationInfo diversification = 3;
  if (this->has_diversification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diversification_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMSG_DesfireAESAuth_Step1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMSG_DesfireAESAuth_Step1)
  GOOGLE_DCHECK_NE(&from, this);
  const CMSG_DesfireAESAuth_Step1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMSG_DesfireAESAuth_Step1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMSG_DesfireAESAuth_Step1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMSG_DesfireAESAuth_Step1)
    MergeFrom(*source);
  }
}

void CMSG_DesfireAESAuth_Step1::MergeFrom(const CMSG_DesfireAESAuth_Step1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMSG_DesfireAESAuth_Step1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.key_uuid().empty()) {
    _internal_set_key_uuid(from._internal_key_uuid());
  }
  if (!from.encrypted_random_picc().empty()) {
    _internal_set_encrypted_random_picc(from._internal_encrypted_random_picc());
  }
  if (from.has_diversification()) {
    _internal_mutable_diversification()->::KeyDiversificationInfo::MergeFrom(from._internal_diversification());
  }
}

void CMSG_DesfireAESAuth_Step1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMSG_DesfireAESAuth_Step1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMSG_DesfireAESAuth_Step1::CopyFrom(const CMSG_DesfireAESAuth_Step1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMSG_DesfireAESAuth_Step1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMSG_DesfireAESAuth_Step1::IsInitialized() const {
  return true;
}

void CMSG_DesfireAESAuth_Step1::InternalSwap(CMSG_DesfireAESAuth_Step1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_uuid_, GetArenaForAllocation(),
      &other->key_uuid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encrypted_random_picc_, GetArenaForAllocation(),
      &other->encrypted_random_picc_, other->GetArenaForAllocation()
  );
  swap(diversification_, other->diversification_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMSG_DesfireAESAuth_Step1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iks_2eproto_getter, &descriptor_table_iks_2eproto_once,
      file_level_metadata_iks_2eproto[8]);
}

// ===================================================================

class SMSG_DesfireAESAuth_Step1::_Internal {
 public:
};

SMSG_DesfireAESAuth_Step1::SMSG_DesfireAESAuth_Step1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SMSG_DesfireAESAuth_Step1)
}
SMSG_DesfireAESAuth_Step1::SMSG_DesfireAESAuth_Step1(const SMSG_DesfireAESAuth_Step1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encrypted_cryptogram_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encrypted_cryptogram().empty()) {
    encrypted_cryptogram_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encrypted_cryptogram(), 
      GetArenaForAllocation());
  }
  auth_context_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_context_id().empty()) {
    auth_context_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth_context_id(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:SMSG_DesfireAESAuth_Step1)
}

void SMSG_DesfireAESAuth_Step1::SharedCtor() {
encrypted_cryptogram_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
auth_context_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

SMSG_DesfireAESAuth_Step1::~SMSG_DesfireAESAuth_Step1() {
  // @@protoc_insertion_point(destructor:SMSG_DesfireAESAuth_Step1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SMSG_DesfireAESAuth_Step1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encrypted_cryptogram_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_context_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SMSG_DesfireAESAuth_Step1::ArenaDtor(void* object) {
  SMSG_DesfireAESAuth_Step1* _this = reinterpret_cast< SMSG_DesfireAESAuth_Step1* >(object);
  (void)_this;
}
void SMSG_DesfireAESAuth_Step1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SMSG_DesfireAESAuth_Step1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SMSG_DesfireAESAuth_Step1::Clear() {
// @@protoc_insertion_point(message_clear_start:SMSG_DesfireAESAuth_Step1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encrypted_cryptogram_.ClearToEmpty();
  auth_context_id_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SMSG_DesfireAESAuth_Step1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes encrypted_cryptogram = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_encrypted_cryptogram();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes auth_context_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_auth_context_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMSG_DesfireAESAuth_Step1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SMSG_DesfireAESAuth_Step1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // bytes encrypted_cryptogram = 3;
  if (!this->encrypted_cryptogram().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_encrypted_cryptogram(), target);
  }

  // bytes auth_context_id = 4;
  if (!this->auth_context_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_auth_context_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SMSG_DesfireAESAuth_Step1)
  return target;
}

size_t SMSG_DesfireAESAuth_Step1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SMSG_DesfireAESAuth_Step1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encrypted_cryptogram = 3;
  if (!this->encrypted_cryptogram().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encrypted_cryptogram());
  }

  // bytes auth_context_id = 4;
  if (!this->auth_context_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_auth_context_id());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMSG_DesfireAESAuth_Step1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SMSG_DesfireAESAuth_Step1)
  GOOGLE_DCHECK_NE(&from, this);
  const SMSG_DesfireAESAuth_Step1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMSG_DesfireAESAuth_Step1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SMSG_DesfireAESAuth_Step1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SMSG_DesfireAESAuth_Step1)
    MergeFrom(*source);
  }
}

void SMSG_DesfireAESAuth_Step1::MergeFrom(const SMSG_DesfireAESAuth_Step1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SMSG_DesfireAESAuth_Step1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.encrypted_cryptogram().empty()) {
    _internal_set_encrypted_cryptogram(from._internal_encrypted_cryptogram());
  }
  if (!from.auth_context_id().empty()) {
    _internal_set_auth_context_id(from._internal_auth_context_id());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void SMSG_DesfireAESAuth_Step1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SMSG_DesfireAESAuth_Step1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMSG_DesfireAESAuth_Step1::CopyFrom(const SMSG_DesfireAESAuth_Step1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SMSG_DesfireAESAuth_Step1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMSG_DesfireAESAuth_Step1::IsInitialized() const {
  return true;
}

void SMSG_DesfireAESAuth_Step1::InternalSwap(SMSG_DesfireAESAuth_Step1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encrypted_cryptogram_, GetArenaForAllocation(),
      &other->encrypted_cryptogram_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &auth_context_id_, GetArenaForAllocation(),
      &other->auth_context_id_, other->GetArenaForAllocation()
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMSG_DesfireAESAuth_Step1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iks_2eproto_getter, &descriptor_table_iks_2eproto_once,
      file_level_metadata_iks_2eproto[9]);
}

// ===================================================================

class CMSG_DesfireISOAuth_Step1::_Internal {
 public:
  static const ::KeyDiversificationInfo& diversification(const CMSG_DesfireISOAuth_Step1* msg);
};

const ::KeyDiversificationInfo&
CMSG_DesfireISOAuth_Step1::_Internal::diversification(const CMSG_DesfireISOAuth_Step1* msg) {
  return *msg->diversification_;
}
CMSG_DesfireISOAuth_Step1::CMSG_DesfireISOAuth_Step1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMSG_DesfireISOAuth_Step1)
}
CMSG_DesfireISOAuth_Step1::CMSG_DesfireISOAuth_Step1(const CMSG_DesfireISOAuth_Step1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key_uuid().empty()) {
    key_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key_uuid(), 
      GetArenaForAllocation());
  }
  random_picc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_random_picc().empty()) {
    random_picc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_random_picc(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_diversification()) {
    diversification_ = new ::KeyDiversificationInfo(*from.diversification_);
  } else {
    diversification_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMSG_DesfireISOAuth_Step1)
}

void CMSG_DesfireISOAuth_Step1::SharedCtor() {
key_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
random_picc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
diversification_ = nullptr;
}

CMSG_DesfireISOAuth_Step1::~CMSG_DesfireISOAuth_Step1() {
  // @@protoc_insertion_point(destructor:CMSG_DesfireISOAuth_Step1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMSG_DesfireISOAuth_Step1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  random_picc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete diversification_;
}

void CMSG_DesfireISOAuth_Step1::ArenaDtor(void* object) {
  CMSG_DesfireISOAuth_Step1* _this = reinterpret_cast< CMSG_DesfireISOAuth_Step1* >(object);
  (void)_this;
}
void CMSG_DesfireISOAuth_Step1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMSG_DesfireISOAuth_Step1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMSG_DesfireISOAuth_Step1::Clear() {
// @@protoc_insertion_point(message_clear_start:CMSG_DesfireISOAuth_Step1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_uuid_.ClearToEmpty();
  random_picc_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && diversification_ != nullptr) {
    delete diversification_;
  }
  diversification_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMSG_DesfireISOAuth_Step1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMSG_DesfireISOAuth_Step1.key_uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes random_picc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_random_picc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KeyDiversificationInfo diversification = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_diversification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMSG_DesfireISOAuth_Step1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMSG_DesfireISOAuth_Step1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key_uuid = 1;
  if (!this->key_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_uuid().data(), static_cast<int>(this->_internal_key_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CMSG_DesfireISOAuth_Step1.key_uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key_uuid(), target);
  }

  // bytes random_picc = 2;
  if (!this->random_picc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_random_picc(), target);
  }

  // .KeyDiversificationInfo diversification = 3;
  if (this->has_diversification()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::diversification(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMSG_DesfireISOAuth_Step1)
  return target;
}

size_t CMSG_DesfireISOAuth_Step1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMSG_DesfireISOAuth_Step1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_uuid = 1;
  if (!this->key_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_uuid());
  }

  // bytes random_picc = 2;
  if (!this->random_picc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_random_picc());
  }

  // .KeyDiversificationInfo diversification = 3;
  if (this->has_diversification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diversification_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMSG_DesfireISOAuth_Step1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMSG_DesfireISOAuth_Step1)
  GOOGLE_DCHECK_NE(&from, this);
  const CMSG_DesfireISOAuth_Step1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMSG_DesfireISOAuth_Step1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMSG_DesfireISOAuth_Step1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMSG_DesfireISOAuth_Step1)
    MergeFrom(*source);
  }
}

void CMSG_DesfireISOAuth_Step1::MergeFrom(const CMSG_DesfireISOAuth_Step1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMSG_DesfireISOAuth_Step1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.key_uuid().empty()) {
    _internal_set_key_uuid(from._internal_key_uuid());
  }
  if (!from.random_picc().empty()) {
    _internal_set_random_picc(from._internal_random_picc());
  }
  if (from.has_diversification()) {
    _internal_mutable_diversification()->::KeyDiversificationInfo::MergeFrom(from._internal_diversification());
  }
}

void CMSG_DesfireISOAuth_Step1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMSG_DesfireISOAuth_Step1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMSG_DesfireISOAuth_Step1::CopyFrom(const CMSG_DesfireISOAuth_Step1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMSG_DesfireISOAuth_Step1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMSG_DesfireISOAuth_Step1::IsInitialized() const {
  return true;
}

void CMSG_DesfireISOAuth_Step1::InternalSwap(CMSG_DesfireISOAuth_Step1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_uuid_, GetArenaForAllocation(),
      &other->key_uuid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &random_picc_, GetArenaForAllocation(),
      &other->random_picc_, other->GetArenaForAllocation()
  );
  swap(diversification_, other->diversification_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMSG_DesfireISOAuth_Step1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iks_2eproto_getter, &descriptor_table_iks_2eproto_once,
      file_level_metadata_iks_2eproto[10]);
}

// ===================================================================

class SMSG_DesfireISOAuth_Step1::_Internal {
 public:
};

SMSG_DesfireISOAuth_Step1::SMSG_DesfireISOAuth_Step1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SMSG_DesfireISOAuth_Step1)
}
SMSG_DesfireISOAuth_Step1::SMSG_DesfireISOAuth_Step1(const SMSG_DesfireISOAuth_Step1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  random2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_random2().empty()) {
    random2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_random2(), 
      GetArenaForAllocation());
  }
  encrypted_cryptogram_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encrypted_cryptogram().empty()) {
    encrypted_cryptogram_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encrypted_cryptogram(), 
      GetArenaForAllocation());
  }
  auth_context_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_context_id().empty()) {
    auth_context_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth_context_id(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:SMSG_DesfireISOAuth_Step1)
}

void SMSG_DesfireISOAuth_Step1::SharedCtor() {
random2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
encrypted_cryptogram_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
auth_context_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

SMSG_DesfireISOAuth_Step1::~SMSG_DesfireISOAuth_Step1() {
  // @@protoc_insertion_point(destructor:SMSG_DesfireISOAuth_Step1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SMSG_DesfireISOAuth_Step1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  random2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_cryptogram_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_context_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SMSG_DesfireISOAuth_Step1::ArenaDtor(void* object) {
  SMSG_DesfireISOAuth_Step1* _this = reinterpret_cast< SMSG_DesfireISOAuth_Step1* >(object);
  (void)_this;
}
void SMSG_DesfireISOAuth_Step1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SMSG_DesfireISOAuth_Step1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SMSG_DesfireISOAuth_Step1::Clear() {
// @@protoc_insertion_point(message_clear_start:SMSG_DesfireISOAuth_Step1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  random2_.ClearToEmpty();
  encrypted_cryptogram_.ClearToEmpty();
  auth_context_id_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SMSG_DesfireISOAuth_Step1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes random2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_random2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes encrypted_cryptogram = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_encrypted_cryptogram();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes auth_context_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_auth_context_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMSG_DesfireISOAuth_Step1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SMSG_DesfireISOAuth_Step1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // bytes random2 = 2;
  if (!this->random2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_random2(), target);
  }

  // bytes encrypted_cryptogram = 3;
  if (!this->encrypted_cryptogram().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_encrypted_cryptogram(), target);
  }

  // bytes auth_context_id = 4;
  if (!this->auth_context_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_auth_context_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SMSG_DesfireISOAuth_Step1)
  return target;
}

size_t SMSG_DesfireISOAuth_Step1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SMSG_DesfireISOAuth_Step1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes random2 = 2;
  if (!this->random2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_random2());
  }

  // bytes encrypted_cryptogram = 3;
  if (!this->encrypted_cryptogram().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encrypted_cryptogram());
  }

  // bytes auth_context_id = 4;
  if (!this->auth_context_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_auth_context_id());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMSG_DesfireISOAuth_Step1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SMSG_DesfireISOAuth_Step1)
  GOOGLE_DCHECK_NE(&from, this);
  const SMSG_DesfireISOAuth_Step1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMSG_DesfireISOAuth_Step1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SMSG_DesfireISOAuth_Step1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SMSG_DesfireISOAuth_Step1)
    MergeFrom(*source);
  }
}

void SMSG_DesfireISOAuth_Step1::MergeFrom(const SMSG_DesfireISOAuth_Step1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SMSG_DesfireISOAuth_Step1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.random2().empty()) {
    _internal_set_random2(from._internal_random2());
  }
  if (!from.encrypted_cryptogram().empty()) {
    _internal_set_encrypted_cryptogram(from._internal_encrypted_cryptogram());
  }
  if (!from.auth_context_id().empty()) {
    _internal_set_auth_context_id(from._internal_auth_context_id());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void SMSG_DesfireISOAuth_Step1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SMSG_DesfireISOAuth_Step1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMSG_DesfireISOAuth_Step1::CopyFrom(const SMSG_DesfireISOAuth_Step1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SMSG_DesfireISOAuth_Step1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMSG_DesfireISOAuth_Step1::IsInitialized() const {
  return true;
}

void SMSG_DesfireISOAuth_Step1::InternalSwap(SMSG_DesfireISOAuth_Step1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &random2_, GetArenaForAllocation(),
      &other->random2_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encrypted_cryptogram_, GetArenaForAllocation(),
      &other->encrypted_cryptogram_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &auth_context_id_, GetArenaForAllocation(),
      &other->auth_context_id_, other->GetArenaForAllocation()
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMSG_DesfireISOAuth_Step1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iks_2eproto_getter, &descriptor_table_iks_2eproto_once,
      file_level_metadata_iks_2eproto[11]);
}

// ===================================================================

class CMSG_DesfireAuth_Step2::_Internal {
 public:
  static const ::KeyDiversificationInfo& diversification(const CMSG_DesfireAuth_Step2* msg);
};

const ::KeyDiversificationInfo&
CMSG_DesfireAuth_Step2::_Internal::diversification(const CMSG_DesfireAuth_Step2* msg) {
  return *msg->diversification_;
}
CMSG_DesfireAuth_Step2::CMSG_DesfireAuth_Step2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMSG_DesfireAuth_Step2)
}
CMSG_DesfireAuth_Step2::CMSG_DesfireAuth_Step2(const CMSG_DesfireAuth_Step2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key_uuid().empty()) {
    key_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key_uuid(), 
      GetArenaForAllocation());
  }
  picc_cryptogram_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_picc_cryptogram().empty()) {
    picc_cryptogram_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_picc_cryptogram(), 
      GetArenaForAllocation());
  }
  auth_context_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_context_id().empty()) {
    auth_context_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth_context_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_diversification()) {
    diversification_ = new ::KeyDiversificationInfo(*from.diversification_);
  } else {
    diversification_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMSG_DesfireAuth_Step2)
}

void CMSG_DesfireAuth_Step2::SharedCtor() {
key_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
picc_cryptogram_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
auth_context_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
diversification_ = nullptr;
}

CMSG_DesfireAuth_Step2::~CMSG_DesfireAuth_Step2() {
  // @@protoc_insertion_point(destructor:CMSG_DesfireAuth_Step2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMSG_DesfireAuth_Step2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  picc_cryptogram_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_context_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete diversification_;
}

void CMSG_DesfireAuth_Step2::ArenaDtor(void* object) {
  CMSG_DesfireAuth_Step2* _this = reinterpret_cast< CMSG_DesfireAuth_Step2* >(object);
  (void)_this;
}
void CMSG_DesfireAuth_Step2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMSG_DesfireAuth_Step2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMSG_DesfireAuth_Step2::Clear() {
// @@protoc_insertion_point(message_clear_start:CMSG_DesfireAuth_Step2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_uuid_.ClearToEmpty();
  picc_cryptogram_.ClearToEmpty();
  auth_context_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && diversification_ != nullptr) {
    delete diversification_;
  }
  diversification_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMSG_DesfireAuth_Step2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMSG_DesfireAuth_Step2.key_uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes picc_cryptogram = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_picc_cryptogram();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes auth_context_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_auth_context_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KeyDiversificationInfo diversification = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_diversification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMSG_DesfireAuth_Step2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMSG_DesfireAuth_Step2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key_uuid = 1;
  if (!this->key_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_uuid().data(), static_cast<int>(this->_internal_key_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CMSG_DesfireAuth_Step2.key_uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key_uuid(), target);
  }

  // bytes picc_cryptogram = 2;
  if (!this->picc_cryptogram().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_picc_cryptogram(), target);
  }

  // bytes auth_context_id = 3;
  if (!this->auth_context_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_auth_context_id(), target);
  }

  // .KeyDiversificationInfo diversification = 4;
  if (this->has_diversification()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::diversification(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMSG_DesfireAuth_Step2)
  return target;
}

size_t CMSG_DesfireAuth_Step2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMSG_DesfireAuth_Step2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_uuid = 1;
  if (!this->key_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_uuid());
  }

  // bytes picc_cryptogram = 2;
  if (!this->picc_cryptogram().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_picc_cryptogram());
  }

  // bytes auth_context_id = 3;
  if (!this->auth_context_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_auth_context_id());
  }

  // .KeyDiversificationInfo diversification = 4;
  if (this->has_diversification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diversification_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMSG_DesfireAuth_Step2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMSG_DesfireAuth_Step2)
  GOOGLE_DCHECK_NE(&from, this);
  const CMSG_DesfireAuth_Step2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMSG_DesfireAuth_Step2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMSG_DesfireAuth_Step2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMSG_DesfireAuth_Step2)
    MergeFrom(*source);
  }
}

void CMSG_DesfireAuth_Step2::MergeFrom(const CMSG_DesfireAuth_Step2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMSG_DesfireAuth_Step2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.key_uuid().empty()) {
    _internal_set_key_uuid(from._internal_key_uuid());
  }
  if (!from.picc_cryptogram().empty()) {
    _internal_set_picc_cryptogram(from._internal_picc_cryptogram());
  }
  if (!from.auth_context_id().empty()) {
    _internal_set_auth_context_id(from._internal_auth_context_id());
  }
  if (from.has_diversification()) {
    _internal_mutable_diversification()->::KeyDiversificationInfo::MergeFrom(from._internal_diversification());
  }
}

void CMSG_DesfireAuth_Step2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMSG_DesfireAuth_Step2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMSG_DesfireAuth_Step2::CopyFrom(const CMSG_DesfireAuth_Step2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMSG_DesfireAuth_Step2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMSG_DesfireAuth_Step2::IsInitialized() const {
  return true;
}

void CMSG_DesfireAuth_Step2::InternalSwap(CMSG_DesfireAuth_Step2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_uuid_, GetArenaForAllocation(),
      &other->key_uuid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &picc_cryptogram_, GetArenaForAllocation(),
      &other->picc_cryptogram_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &auth_context_id_, GetArenaForAllocation(),
      &other->auth_context_id_, other->GetArenaForAllocation()
  );
  swap(diversification_, other->diversification_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMSG_DesfireAuth_Step2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iks_2eproto_getter, &descriptor_table_iks_2eproto_once,
      file_level_metadata_iks_2eproto[12]);
}

// ===================================================================

class SMSG_DesfireAuth_Step2::_Internal {
 public:
};

SMSG_DesfireAuth_Step2::SMSG_DesfireAuth_Step2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SMSG_DesfireAuth_Step2)
}
SMSG_DesfireAuth_Step2::SMSG_DesfireAuth_Step2(const SMSG_DesfireAuth_Step2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_key().empty()) {
    session_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_key(), 
      GetArenaForAllocation());
  }
  session_key_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_key_ref().empty()) {
    session_key_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_key_ref(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:SMSG_DesfireAuth_Step2)
}

void SMSG_DesfireAuth_Step2::SharedCtor() {
session_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
session_key_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

SMSG_DesfireAuth_Step2::~SMSG_DesfireAuth_Step2() {
  // @@protoc_insertion_point(destructor:SMSG_DesfireAuth_Step2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SMSG_DesfireAuth_Step2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_key_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SMSG_DesfireAuth_Step2::ArenaDtor(void* object) {
  SMSG_DesfireAuth_Step2* _this = reinterpret_cast< SMSG_DesfireAuth_Step2* >(object);
  (void)_this;
}
void SMSG_DesfireAuth_Step2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SMSG_DesfireAuth_Step2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SMSG_DesfireAuth_Step2::Clear() {
// @@protoc_insertion_point(message_clear_start:SMSG_DesfireAuth_Step2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_key_.ClearToEmpty();
  session_key_ref_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SMSG_DesfireAuth_Step2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes session_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_session_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_key_ref = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_session_key_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SMSG_DesfireAuth_Step2.session_key_ref"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMSG_DesfireAuth_Step2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SMSG_DesfireAuth_Step2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // bytes session_key = 2;
  if (!this->session_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_session_key(), target);
  }

  // string session_key_ref = 3;
  if (!this->session_key_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_key_ref().data(), static_cast<int>(this->_internal_session_key_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SMSG_DesfireAuth_Step2.session_key_ref");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_key_ref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SMSG_DesfireAuth_Step2)
  return target;
}

size_t SMSG_DesfireAuth_Step2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SMSG_DesfireAuth_Step2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes session_key = 2;
  if (!this->session_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_session_key());
  }

  // string session_key_ref = 3;
  if (!this->session_key_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_key_ref());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMSG_DesfireAuth_Step2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SMSG_DesfireAuth_Step2)
  GOOGLE_DCHECK_NE(&from, this);
  const SMSG_DesfireAuth_Step2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMSG_DesfireAuth_Step2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SMSG_DesfireAuth_Step2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SMSG_DesfireAuth_Step2)
    MergeFrom(*source);
  }
}

void SMSG_DesfireAuth_Step2::MergeFrom(const SMSG_DesfireAuth_Step2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SMSG_DesfireAuth_Step2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.session_key().empty()) {
    _internal_set_session_key(from._internal_session_key());
  }
  if (!from.session_key_ref().empty()) {
    _internal_set_session_key_ref(from._internal_session_key_ref());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void SMSG_DesfireAuth_Step2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SMSG_DesfireAuth_Step2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMSG_DesfireAuth_Step2::CopyFrom(const SMSG_DesfireAuth_Step2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SMSG_DesfireAuth_Step2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMSG_DesfireAuth_Step2::IsInitialized() const {
  return true;
}

void SMSG_DesfireAuth_Step2::InternalSwap(SMSG_DesfireAuth_Step2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_key_, GetArenaForAllocation(),
      &other->session_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_key_ref_, GetArenaForAllocation(),
      &other->session_key_ref_, other->GetArenaForAllocation()
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMSG_DesfireAuth_Step2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iks_2eproto_getter, &descriptor_table_iks_2eproto_once,
      file_level_metadata_iks_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KeyDiversificationInfo* Arena::CreateMaybeMessage< ::KeyDiversificationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KeyDiversificationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SignatureDescription* Arena::CreateMaybeMessage< ::SignatureDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SignatureDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::CMSG_DesfireChangeKey* Arena::CreateMaybeMessage< ::CMSG_DesfireChangeKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMSG_DesfireChangeKey >(arena);
}
template<> PROTOBUF_NOINLINE ::SMSG_DesfireChangeKey* Arena::CreateMaybeMessage< ::SMSG_DesfireChangeKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SMSG_DesfireChangeKey >(arena);
}
template<> PROTOBUF_NOINLINE ::CMSG_GenRandom* Arena::CreateMaybeMessage< ::CMSG_GenRandom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMSG_GenRandom >(arena);
}
template<> PROTOBUF_NOINLINE ::SMSG_GenRandom* Arena::CreateMaybeMessage< ::SMSG_GenRandom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SMSG_GenRandom >(arena);
}
template<> PROTOBUF_NOINLINE ::CMSG_AESOperation* Arena::CreateMaybeMessage< ::CMSG_AESOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMSG_AESOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::SMSG_AESResult* Arena::CreateMaybeMessage< ::SMSG_AESResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SMSG_AESResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CMSG_DesfireAESAuth_Step1* Arena::CreateMaybeMessage< ::CMSG_DesfireAESAuth_Step1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMSG_DesfireAESAuth_Step1 >(arena);
}
template<> PROTOBUF_NOINLINE ::SMSG_DesfireAESAuth_Step1* Arena::CreateMaybeMessage< ::SMSG_DesfireAESAuth_Step1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SMSG_DesfireAESAuth_Step1 >(arena);
}
template<> PROTOBUF_NOINLINE ::CMSG_DesfireISOAuth_Step1* Arena::CreateMaybeMessage< ::CMSG_DesfireISOAuth_Step1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMSG_DesfireISOAuth_Step1 >(arena);
}
template<> PROTOBUF_NOINLINE ::SMSG_DesfireISOAuth_Step1* Arena::CreateMaybeMessage< ::SMSG_DesfireISOAuth_Step1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SMSG_DesfireISOAuth_Step1 >(arena);
}
template<> PROTOBUF_NOINLINE ::CMSG_DesfireAuth_Step2* Arena::CreateMaybeMessage< ::CMSG_DesfireAuth_Step2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMSG_DesfireAuth_Step2 >(arena);
}
template<> PROTOBUF_NOINLINE ::SMSG_DesfireAuth_Step2* Arena::CreateMaybeMessage< ::SMSG_DesfireAuth_Step2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SMSG_DesfireAuth_Step2 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
